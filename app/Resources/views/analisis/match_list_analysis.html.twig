{% extends "layout.html.twig" %}

{% block title %}Match List Analysis | {% endblock %}

{% block main_content %}

    <div class="container">
        <div class="card card-block">
            <h4 class="card-title">{%trans%}Match List Analysis{%endtrans%}</h4>
            <form id="SearchSummonerForm" class="form mx-auto">
                <fieldset class="form-group row form-inline">
                    <select name="region" class="form-control  mb-2 mr-sm-2 mb-sm-0">
                        <option value="euw" selected="selected">EUW</option>
                        <option value="lan">LAN</option>
                        <option value="las">LAS</option>
                    </select>
                    <input type="text" class="form-control mb-2 mr-sm-2 mb-sm-0" name="summoner_name" placeholder="Summoner name..." value="">
                    <div class="form-check mb-2 mr-sm-2 mb-sm-0">
                        <label class="form-check-label">
                            <input class="form-check-input" name="force_get_cache" type="checkbox" value="1"> Force get cache
                        </label>
                    </div>
                </fieldset>
                <fieldset class="form-group row form-inline">
                    Fecha inicial <input type="text" placeholder="dd-mm-yyy" class="datepicker form-control ml-2 mb-2 mr-sm-2 mb-sm-0" name="start_date">
                    Fecha final <input type="text" placeholder="dd-mm-yyyy" class="datepicker form-control ml-2 mb-2 mb-sm-0" name="end_date">
                </fieldset>
                <button type="submit" class="btn btn-primary pull-right">Submit</button>
            </form>
            <div class="form-msgs"></div>
            <div class="progress-msg" id="Loading"></div>
            <div class="analysis-result"></div>
        </div>
    </div>
    <style type="text/css">
        .champion_square{
            height:35px;
        }
        .progress-msg {
            position: fixed;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,.5);
            top: 0;
            left: 0;
            z-index: 99;
            display:none;
            transition: ease 0.4s opacity;
            text-align: center;
        }
        .progress-box{
            display:inline-block;
            max-width: 90%;
            width: 800px;
        }
        .progress-box{
            line-height: 30px;
            color: #f4f4f4;
            font-weight: bold;
            text-shadow: 0 0 2px black;
        }
    </style>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/r/ju-1.11.4/jqc-1.11.3,dt-1.10.8/datatables.min.css">
    <script type="text/javascript" src="https://cdn.datatables.net/r/ju-1.11.4/jqc-1.11.3,dt-1.10.8/datatables.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#SearchSummonerForm').on('submit', function (e) {
                e.preventDefault();
                startAnalisis();
                return false;
            });

            $('input.datepicker').datepicker({
                dateFormat: "dd-mm-yy",
                firstDay: 1,
                maxDate: "+1d"
            });
        });

        function startAnalisis() {

            var analysisStartingTime = window.performance.now();

            $('.progress-msg').html('<div class="progress-box"><p></p><div class="progress"><div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div></div></div>')
            $('.progress-msg').css('display', 'block');
            $('.progress-msg').css('line-height', $(window).height() + 'px');

            var summonerName = $('#SearchSummonerForm input[name="summoner_name"]').val();
            var region = $('#SearchSummonerForm select[name="region"]').val();
            var forceGetCache = $('#SearchSummonerForm input[name="force_get_cache"]').prop('checked');

            var startDate = $('#SearchSummonerForm input[name="start_date"]').val();
            var endDate = $('#SearchSummonerForm input[name="end_date"]').val();

            //inicializaciones
            setProgressBar('#Loading', 0, 'Buscando invocador...');
            var data = {};

            //preparando llamadas a los datos
            try {

                //primer ajax: buscamos el invocador.
                var searchedSummoner = lolapicall(region, 'getSummonerDtoByName', [summonerName], forceGetCache).data;
                addProgressToProgressBar('#Loading', 20, 'Buscando match list...');
                data.searchedSummoner = searchedSummoner;

                //buscamos partida en curso
                var matchlist = lolapicall(region, 'getMatchList', [searchedSummoner.id, null, null, convertDateToTimestamp(startDate), convertDateToTimestamp(endDate)], forceGetCache).data;
                data.matchlist = matchlist;

                if (data.matchlist.matches.length < 10) {
                    throw new Error("No hay rankeds suficientes para poder cotegar datos. Escoge un rango de fechas mayor.");
                }

                var totalProgressMatchesDetailLoad = 40;
                var progressPerMatchDetail = totalProgressMatchesDetailLoad / data.matchlist.matches.length

                addProgressToProgressBar('#Loading', progressPerMatchDetail, 'Se han encontrado ' + data.matchlist.matches.length + ' matches. Recuperando match detail de cada uno (1/' + data.matchlist.matches.length + ').');
                for (var matchindex in data.matchlist.matches) {
                    var match = data.matchlist.matches[matchindex];
                    var matchdetail = lolapicall(region, 'getMatchDetail', [match.matchId, false], forceGetCache).data;
                    data.matchlist.matches[matchindex].matchdetail = matchdetail;
                    addProgressToProgressBar('#Loading', progressPerMatchDetail, 'Se han encontrado ' + data.matchlist.matches.length + ' matches. Recuperando match detail de cada uno (' + (parseInt(matchindex) + 2) + '/' + data.matchlist.matches.length + ').');
                }

                //realizando el analisis.
                addProgressToProgressBar('#Loading', 1, 'Realizando análisis de datos.');

                var analysis = [];
                var totals = {wins: 0, loses: 0, matches: 0}
                var totalProgressAnalysis = 29;
                var progressPerParticipantAnalysis = totalProgressAnalysis / (data.matchlist.matches.length * 10)

                for (var matchindex in data.matchlist.matches) {
                    var match = data.matchlist.matches[matchindex];

                    var yoursParticipant = null;
                    for (var participantindex in match.matchdetail.participants) {
                        if (data.searchedSummoner.id == match.matchdetail.participantIdentities[participantindex].player.summonerId) {
                            yoursParticipant = match.matchdetail.participants[participantindex];
                            break;
                        }
                    }

                    for (var participantindex in match.matchdetail.participants) {
                        var participant = match.matchdetail.participants[participantindex];

                        var champId = participant.championId;
                        var win = participant.stats.winner;

                        // inicializacion de variables
                        if (analysis[champId] == null) {
                            analysis[champId] = {};
                            analysis[champId].wins = 0;
                            analysis[champId].loses = 0;
                            analysis[champId].yours = 0;
                            analysis[champId].totalMatches = 0;
                            analysis[champId].onYourTeam = 0;
                            analysis[champId].onYourTeamAndWin = 0;
                            analysis[champId].onYourTeamAndLose = 0;
                            analysis[champId].onEnemyTeam = 0;
                            analysis[champId].onEnemyTeamAndWin = 0;
                            analysis[champId].onEnemyTeamAndLose = 0;
                        }

                        analysis[champId].wins += win ? 1 : 0;
                        analysis[champId].loses += win ? 0 : 1;
                        analysis[champId].totalMatches++;
                        analysis[champId].winRate = analysis[champId].wins / analysis[champId].totalMatches; //se reescribe cada vez así no se necesita calcularla

                        if (participant.participantId == yoursParticipant.participantId) {
                            analysis[champId].yours += 1;
                        }

                        if (yoursParticipant.teamId == participant.teamId) {
                            analysis[champId].onYourTeam++;
                            analysis[champId].onYourTeamAndWin += win ? 1 : 0;
                            analysis[champId].onYourTeamAndLose += win ? 0 : 1;
                        } else {
                            analysis[champId].onEnemyTeam++;
                            analysis[champId].onEnemyTeamAndWin += win ? 1 : 0;
                            analysis[champId].onEnemyTeamAndLose += win ? 0 : 1;
                        }

                        totals.wins += win ? 1 : 0;
                        totals.loses += win ? 0 : 1;
                        totals.matches++;

                        addProgressToProgressBar('#Loading', progressPerParticipantAnalysis, 'Realizando análisis de datos. Match ' + (parseInt(matchindex) + 1) + '/' + data.matchlist.matches.length + ', participant ' + (parseInt(participantindex) + 1) + '/10');
                    }

                }

                //calculamos el win ratio relativo de cada campeon
                var analysisFinal = [];
                var maxRelativeWinRate = 0;
                for (var champId in analysis) {
                    var champInfo = analysis[champId];
                    if (champInfo.totalMatches > {{minTotalMatches}}) {
                        champInfo.id = champId;
                        champInfo.relativeWinRate = champInfo.winRate * totals.matches + champInfo.wins;
                        var championInfo = lolapicall(region, 'getStaticChampionDto', [champId, 'image'], forceGetCache).data;
                        champInfo.lolinfo = championInfo;
                        champInfo.imgsrc = 'http://ddragon.leagueoflegends.com/cdn/{{champImgVersion}}/img/champion/' + champInfo.lolinfo.image.full;
                        if (champInfo.relativeWinRate > maxRelativeWinRate) {
                            maxRelativeWinRate = champInfo.relativeWinRate;
                        }

                        analysisFinal.push(champInfo);
                    }
                }

                //limpiamos memoria del analisis
                delete analysis;

                if (analysisFinal.length == 0) {
                    throw new Error('Los datos de las partidas obtenidas no son fiables, se requieren más partidas, amplia las fechas.');
                }

                analysisFinal.sort(function (a, b) {
                    return b.relativeWinRate - a.relativeWinRate;
                });

                console.log(data);
                console.log(analysisFinal);

                addProgressToProgressBar('#Loading', 5, 'Creando visualización de los datos.');

                var strAnalysis = "";

                strAnalysis += "<table class='datatable'>";
                strAnalysis += "<thead>";
                strAnalysis += "<tr><th>Champion</th><th>TotalMatches</th><th>WinRate</th><th>onYourTeam</th><th>onYourTeam Win%</th><th>onEnemyTeam</th><th>onEnemyTeam Win%</th><th>Win Ratio Relativo</th></tr>";
                strAnalysis += "</thead>";
                strAnalysis += "<tbody>";
                for (var champId in analysisFinal) {
                    var champInfo = analysisFinal[champId];
                    var relativeWinRatePer100 = (champInfo.relativeWinRate * 100) / maxRelativeWinRate;
                    strAnalysis += '<tr>';
                    strAnalysis += '<td><img class="champion_square" src="' + champInfo.imgsrc + '"></td>';
                    strAnalysis += '<td>' + champInfo.totalMatches + (champInfo.yours > 0 ? ' (yours: ' + champInfo.yours + ')' : '') + '</td>';
                    strAnalysis += '<td>' + (champInfo.winRate * 100).toFixed(2) + '%</td>';
                    strAnalysis += '<td>' + champInfo.onYourTeam + ' (' + champInfo.onYourTeamAndWin + 'W/' + champInfo.onYourTeamAndLose + 'L)</td>';
                    strAnalysis += '<td>' + ((champInfo.onYourTeamAndWin * 100) / champInfo.onYourTeam).toFixed(2) + '%</td>';
                    strAnalysis += '<td>' + champInfo.onEnemyTeam + ' (' + champInfo.onEnemyTeamAndWin + 'W/' + champInfo.onEnemyTeamAndLose + 'L)</td>';
                    strAnalysis += '<td>' + ((champInfo.onEnemyTeamAndWin * 100) / champInfo.onEnemyTeam).toFixed(2) + '%</td>';
                    strAnalysis += '<td>' + relativeWinRatePer100.toFixed(2) + '%<div class="progress"><div class="progress-bar bg-success" role="progressbar" aria-valuenow="' + relativeWinRatePer100 + '" aria-valuemin="0" aria-valuemax="100" style="width:' + relativeWinRatePer100.toFixed(2) + '%"></div></div></td>';
                    strAnalysis += "</tr>";
                }
                strAnalysis += "</tbody>";
                strAnalysis += "</table>";

                $('.analysis-result').html(strAnalysis);
                $('.datatable').dataTable();
                setProgressBar('#Loading', 100, 'Finalizado');

                $('#Loading').html('');
                $('.progress-msg').css('display', 'none');

                posFooter();

                var analysisEndingTime = window.performance.now();
                console.log(analysisStartingTime);
                console.log(analysisEndingTime);
                $('.analysis-result').append('<p>Tiempo requerido: ' + msToTime(analysisEndingTime - analysisStartingTime) + '</p>');

            } catch (err) {
                $('.form-msgs').append('<div class="alert alert-danger" role="alert">' + err.message + '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>')
                $('.progress-msg').html('');
                $('.progress-msg').css('display', 'none');
            }
        }

        function msToTime(duration) {
            var milliseconds = parseInt((duration % 1000) / 100)
                    , seconds = parseInt((duration / 1000) % 60)
                    , minutes = parseInt((duration / (1000 * 60)) % 60)
                    , hours = parseInt((duration / (1000 * 60 * 60)) % 24);

            hours = (hours < 10) ? "0" + hours : hours;
            minutes = (minutes < 10) ? "0" + minutes : minutes;
            seconds = (seconds < 10) ? "0" + seconds : seconds;

            return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
        }

        function setProgressBar(id, intProgress, msg) {
            $(id + ' .progress-bar').attr('aria-valuenow', intProgress);
            $(id + ' .progress-bar').css('width', intProgress + '%');
            if (msg) {
                $(id + ' p').html(msg + ' (' + intProgress.toFixed(2) + '%)');
            }
        }

        function addProgressToProgressBar(id, intProgress, msg) {
            var currentProgress = parseFloat($(id + ' .progress-bar').attr('aria-valuenow'));
            setProgressBar(id, currentProgress + intProgress, msg);
        }

        /**
         * 
         * @param {string} strDate dd-mm-yyy
         * @returns {Date}
         */
        function convertDateToTimestamp(strDate) {
            var dateString = strDate,
                    dateTimeParts = dateString.split(' '),
                    dateParts = dateTimeParts[0].split('-'),
                    date;

            date = new Date(dateParts[2], parseInt(dateParts[1], 10) - 1, dateParts[0]);
            return date.getTime();
        }

    </script>




{% endblock %}
